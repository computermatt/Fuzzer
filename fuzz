#! /usr/bin/env python3.3

import argparse
import sys
import Input, auth, Discovery
import requests

if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument("mode", nargs="?", help="Discover: Output a comprehensive, human-readable list of all discovered inputs to the system.  Techniques include both crawling and guessing. Test: Discover all inputs, then attempt a list of exploit vectors on those inputs. Report potential vulnerabilities.")
	parser.add_argument("url", nargs="?", help="URL to fuzz.")
	parser.add_argument("--custom-auth", dest="cust_auth", help="Signal that the fuzzer should use hard-coded authentication for a specific application (e.g. dvwa). Optional.")	
	parser.add_argument("--common-words", dest="common_words", help="Newline-delimited file of common words to be used in page guessing and input guessing. Required (for discover).")
	parser.add_argument("--vectors", dest="vectors", help="Newline-delimited file of common exploits to vulnerabilities. Required (for test).")
	parser.add_argument("--sensitive", dest="sensitive", help="Newline-delimited file data that should never be leaked. It's assumed that this data is in the application's database (e.g. test data), but is not reported in any response. Required (for test).")
	parser.add_argument("--random", dest="is_random", help="When off, try each input to each page systematically.  When on, choose a random page, then a random input field and test all vectors. Default: false.", default="false")
	parser.add_argument("--slow", dest="slow", help='Number of milliseconds considered when a response is considered "slow". Default is 500 milliseconds', default="500")

	args = parser.parse_args()
	args = vars(args)
	if args["mode"] == "test":
		if not args["vectors"]:
			print("Missing vectors list\n\n")
			parser.print_help()
			sys.exit()
		vectorFile = args["vectors"]
		if not args["sensitive"]:
			print("Missing sensitive data list\n\n")
			parser.print_help()
			sys.exit()
		testList = args["sensitive"]


	elif args["mode"] == "discover":
		if not args["common_words"]:
			print("Missing common words list\n\n")
			parser.print_help()
			sys.exit()
		if not args["url"]:
			print("Missing URL\n\n")
			parser.print_help()
			sys.exit()

	else:
		parser.print_help()
		sys.exit()


	auth = auth.Auth()
	url = args["url"] + "login.php" #this assumes trailing slash
	session = auth.authenticate(url, "admin", "password")
	discover = Discovery.Discovery(session)
	foundURLs = discover.search(args["url"])
	

	extList = [".html", ".php", ".jsp", ""]
	fileList = open(args["common_words"]).read().splitlines()
	guessedURLs = discover.guess(args["url"], fileList, extList)


	discoveredInputs = {}
	input = Input.Input()
	for url in foundURLs[0]:
		discoveredInputs[url] = input.parseURL(url) + input.discoverForms(foundURLs[1][url])

	if args["mode"] == "discover":
		print("Discovered pages:")
		print("\tIn URL: " + url + "\n\tFound: " + ", ".join(foundURLs[0]))

		print("\n\tThe following interesting urls point to pages: " + ", ".join(guessedURLs))

		print("Discovered inputs:")
		for k in discoveredInputs.keys():
			if len(discoveredInputs[k]) != 0:
				print("\t\t" + k + ": " + ", ".join(discoveredInputs[k]))
		print("Cookies: " + str([(x.name, x.value) for x in input.discoverCookies(session)]))
	else: #we can assume test because we do the check above for the type
		r = Response.getResults(foundURLs[0], discoveredInputs, 0.1, testList, "admin", "password", vectorFile)
